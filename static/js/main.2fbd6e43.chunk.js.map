{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","isReversed","sortType","NONE","reverse","setState","sortByAlph","ALPHABET","sortByLength","LENGTH","reset","isInitialState","this","reorderedGoodsArray","goods","visibleGoods","sort","a","b","length","getReorderedGoods","className","type","onClick","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAiBKA,E,iGAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,SA0CgBE,E,4MACnBC,MAAe,CACbC,YAAY,EACZC,SAAUL,EAASM,M,EAGrBC,QAAU,WACR,EAAKC,UAAS,SAAAL,GAAK,MAAK,CACtBC,YAAaD,EAAMC,gB,EAIvBK,WAAa,WACX,EAAKD,UAAS,SAAAL,GAAK,kCACdA,GADc,IAEjBE,SAAUL,EAASU,e,EAIvBC,aAAe,WACb,EAAKH,UAAS,SAAAL,GAAK,kCACdA,GADc,IAEjBE,SAAUL,EAASY,a,EAIvBC,MAAQ,WACN,EAAKL,SAAS,CACZH,SAAUL,EAASM,KACnBF,YAAY,K,4CAIhB,WACE,IAAMU,GAAkBC,KAAKZ,MAAMC,YAC9BW,KAAKZ,MAAME,WAAaL,EAASM,KAEhCU,EAnEH,SACLC,EADK,GAGJ,IADCZ,EACF,EADEA,SAAUD,EACZ,EADYA,WAENc,EAAY,YAAOD,GAEzB,OAAQZ,GACN,KAAKL,EAASU,SACZQ,EAAaC,OACb,MACF,KAAKnB,EAASY,OACZM,EAAaC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,UAU7C,OAJIlB,GACFc,EAAaX,UAGRW,EA8CuBK,CAAkBtB,EAAiBc,KAAKZ,OAEpE,OACE,sBAAKqB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACET,KAAKZ,MAAME,WAAaL,EAASU,SAC7B,iBACA,0BAENgB,QAASX,KAAKN,WAPhB,iCAYA,wBACEgB,KAAK,SACLD,UACET,KAAKZ,MAAME,WAAaL,EAASY,OAC7B,oBACA,6BAENc,QAASX,KAAKJ,aAPhB,4BAYA,wBACEc,KAAK,SACLD,UACET,KAAKZ,MAAMC,WACP,oBACA,6BAENsB,QAASX,KAAKR,QAPhB,sBAYEO,GACA,wBACEW,KAAK,SACLD,UAAU,4BACVE,QAASX,KAAKF,MAHhB,sBAUJ,6BACE,6BACGG,EAAoBW,KAAI,SAAAC,GAAI,OAC3B,oBACE,UAAQ,OADV,SAIGA,GAFIA,iB,GA9FYC,IAAMC,WCxDvCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2fbd6e43.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport React from 'react';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort();\n      break;\n    case SortType.LENGTH:\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport default class App extends React.Component<{}, State> {\n  state: State = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  reverse = () => {\n    this.setState(state => ({\n      isReversed: !state.isReversed,\n    }));\n  };\n\n  sortByAlph = () => {\n    this.setState(state => ({\n      ...state,\n      sortType: SortType.ALPHABET,\n    }));\n  };\n\n  sortByLength = () => {\n    this.setState(state => ({\n      ...state,\n      sortType: SortType.LENGTH,\n    }));\n  };\n\n  reset = () => {\n    this.setState({\n      sortType: SortType.NONE,\n      isReversed: false,\n    });\n  };\n\n  render() {\n    const isInitialState = !this.state.isReversed\n      && this.state.sortType === SortType.NONE;\n\n    const reorderedGoodsArray = getReorderedGoods(goodsFromServer, this.state);\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={\n              this.state.sortType === SortType.ALPHABET\n                ? 'button is-info'\n                : 'button is-info is-light'\n            }\n            onClick={this.sortByAlph}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={\n              this.state.sortType === SortType.LENGTH\n                ? 'button is-success'\n                : 'button is-success is-light'\n            }\n            onClick={this.sortByLength}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={\n              this.state.isReversed\n                ? 'button is-warning'\n                : 'button is-warning is-light'\n            }\n            onClick={this.reverse}\n          >\n            Reverse\n          </button>\n\n          {!isInitialState && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={this.reset}\n            >\n              Reset\n            </button>\n          ) }\n        </div>\n\n        <ul>\n          <ul>\n            {reorderedGoodsArray.map(good => (\n              <li\n                data-cy=\"Good\"\n                key={good}\n              >\n                {good}\n              </li>\n            ))}\n          </ul>\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}